{"version":3,"sources":["./src/app/auth/login/login.component.html","./src/app/auth/signup/signup.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.css","./src/app/auth/login/login.component.ts","./src/app/auth/signup/signup.component.css","./src/app/auth/signup/signup.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["module.exports = \"<mat-card>\\n  <mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\n  <form (submit)=\\\"onLogin()\\\" [formGroup]=\\\"authForm\\\" *ngIf=\\\"!isLoading\\\">\\n    <mat-form-field>\\n      <input matInput \\n             name=\\\"email\\\" \\n             formControlName=\\\"email\\\"\\n             type=\\\"email\\\" \\n             placeholder=\\\"E-Mail\\\"\\n             email>\\n      <mat-error *ngIf=\\\"authForm.controls.email.invalid\\\">Please enter a valid email.</mat-error>\\n    </mat-form-field>\\n    <mat-form-field>\\n      <input type=\\\"password\\\" \\n             name=\\\"password\\\" \\n             formControlName=\\\"password\\\"\\n             matInput \\n             placeholder=\\\"Password\\\">\\n      <mat-error *ngIf=\\\"authForm.controls.password.invalid\\\">Please enter a valid password.</mat-error>\\n    </mat-form-field>\\n    <button mat-raised-button color=\\\"accent\\\" type=\\\"submit\\\" *ngIf=\\\"!isLoading\\\">Login</button>\\n    <span class=\\\"forgot-button\\\" routerLink=\\\"/forgot\\\">Forgot password?</span>\\n  </form>\\n</mat-card>\\n\"","module.exports = \"<mat-card>\\n  <mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\n  <form (submit)=\\\"onSignup()\\\" [formGroup]=\\\"authForm\\\" *ngIf=\\\"!isLoading\\\">\\n      <mat-form-field>\\n          <input matInput \\n                 name=\\\"nickname\\\" \\n                 type=\\\"email\\\"\\n                  placeholder=\\\"Your name\\\" \\n                  formControlName=\\\"name\\\" \\n                  required>\\n        </mat-form-field>\\n    <mat-form-field>\\n      <input matInput \\n             name=\\\"email\\\"\\n             type=\\\"email\\\" \\n             placeholder=\\\"E-Mail\\\" \\n             formControlName=\\\"email\\\" \\n             required \\n             email>\\n      <mat-error *ngIf=\\\"authForm.controls.email.invalid\\\">Please enter a valid email.</mat-error>\\n    </mat-form-field>\\n    <mat-form-field>\\n      <input type=\\\"password\\\" \\n             name=\\\"password\\\"\\n             matInput \\n             placeholder=\\\"Password\\\"\\n             formControlName=\\\"password\\\"\\n             required>\\n      <mat-error *ngIf=\\\"authForm.controls.password.invalid\\\">Please enter a valid password.</mat-error>\\n    </mat-form-field>\\n    <button mat-raised-button color=\\\"accent\\\" type=\\\"submit\\\" [disabled]=\\\"authForm.invalid\\\" *ngIf=\\\"!isLoading\\\">Signup</button>\\n  </form>\\n</mat-card>\\n\"","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { LoginComponent } from \"./login/login.component\";\nimport { SignupComponent } from \"./signup/signup.component\";\n\nconst routes: Routes = [\n  { path: \"login\", component: LoginComponent },\n  { path: \"signup\", component: SignupComponent },\n]\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { LoginComponent } from \"./login/login.component\";\nimport { SignupComponent } from \"./signup/signup.component\";\nimport { AngularMaterialModule } from \"../angular-material.module\";\nimport { AuthRoutingModule } from \"./auth-routing.module\";\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AuthEffects } from './store/effects/auth.effects';\nimport { reducers } from '../store/app.states';\n\n@NgModule({\n  declarations: [LoginComponent, SignupComponent],\n  imports: [\n    CommonModule, \n    AngularMaterialModule, \n    FormsModule,\n    ReactiveFormsModule,\n    AuthRoutingModule,\n    // StoreModule.forRoot(reducers, {}),\n    // EffectsModule.forRoot([AuthEffects]),\n  ]\n})\nexport class AuthModule {}\n","module.exports = \"mat-form-field {\\n  width: 100%;\\n}\\n\\nmat-spinner {\\n  margin: auto;\\n}\\n\\n.forgot-button {\\n  margin-left: 20px;\\n  font-size: 12px;\\n}\\n\\n.forgot-button:hover {\\n  text-decoration: underline;\\n  cursor: pointer;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSwwQkFBMEI7RUFDMUIsZUFBZTtBQUNqQiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbm1hdC1zcGlubmVyIHtcbiAgbWFyZ2luOiBhdXRvO1xufVxuXG4uZm9yZ290LWJ1dHRvbiB7XG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICBmb250LXNpemU6IDEycHg7XG59XG5cbi5mb3Jnb3QtYnV0dG9uOmhvdmVyIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbiJdfQ== */\"","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { NgForm, FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\n\nimport { AuthService } from \"../auth.service\";\nimport { Store } from '@ngrx/store';\nimport { AppAuthState } from 'src/app/store/app.states';\nimport { LogIn } from 'src/app/store/actions/auth.actions';\n\n@Component({\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"]\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  authForm: FormGroup;\n\n  constructor(\n    public authService: AuthService,\n    private store: Store<AppAuthState>\n  ) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false;\n      }\n    );\n    this.authForm = new FormGroup({\n      email: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required),\n    });\n  }\n\n  onLogin() {\n    if (this.authForm.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    const payload = {\n      email: this.authForm.value.email,\n      password: this.authForm.value.password\n    };\n    this.store.dispatch(new LogIn(payload));\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n}\n","module.exports = \"mat-form-field {\\n  width: 100%;\\n}\\n\\nmat-spinner {\\n  margin: auto;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC9hdXRoL3NpZ251cC9zaWdudXAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbm1hdC1zcGlubmVyIHtcbiAgbWFyZ2luOiBhdXRvO1xufVxuIl19 */\"","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { NgForm, FormGroup, FormControl } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport { Store } from '@ngrx/store';\n\nimport { AuthService } from \"../auth.service\";\nimport { AppAuthState } from 'src/app/store/app.states';\nimport { SignUp } from 'src/app/store/actions/auth.actions';\n\n@Component({\n  templateUrl: \"./signup.component.html\",\n  styleUrls: [\"./signup.component.css\"]\n})\nexport class SignupComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  authForm = new FormGroup({\n    name: new FormControl(''),\n    email: new FormControl(''),\n    password: new FormControl(''),\n  });\n\n  constructor(\n    public authService: AuthService,\n    private store: Store<AppAuthState>\n  ) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false;\n      }\n    );\n  }\n\n  onSignup() {\n    if (this.authForm.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    const payload = {\n      name: this.authForm.value.name,\n      email: this.authForm.value.email,\n      password: this.authForm.value.password\n    };\n    \n    this.store.dispatch(new SignUp(payload));\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n}\n"],"sourceRoot":""}